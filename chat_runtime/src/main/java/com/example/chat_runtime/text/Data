public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer id;
    private String fullname;
    private String email;
    private String profile_picture;
    private String password;

    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User user = (User) o;
        return Objects.equals(id, user.id) && Objects.equals(fullname, user.fullname)
            && Objects.equals(email, user.email) && Objects.equals(profile_picture,
            user.profile_picture) && Objects.equals(password, user.password);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, fullname, email, profile_picture, password);
    }
}

public class Message {
  @Id
  @GeneratedValue(strategy =  GenerationType.AUTO)
  private Integer id;
  private String content;

  private LocalDateTime timeStapm;

  @ManyToOne
  private User user;

  @ManyToOne
  private Chat chat;

}

public class Chat {
  @Id
  @GeneratedValue(strategy =  GenerationType.AUTO)
  private Integer id;

  private String chat_Name;

  private String chat_image;

  @Column(name="is_group")
  private  boolean isGroup;

  @Column(name="create_by")
  @ManyToOne
  private User createBy;

  @ManyToMany
  private Set<User> users = new HashSet<>();

  @OneToMany
  private List<Message> messages = new ArrayList<>();

}

- Xoay quanh 3 bảng chính:

   | Entity    | Ý nghĩa thực tế                                  |
   | --------- | ------------------------------------------------ |
   | `User`    | Người dùng trong hệ thống                        |
   | `Chat`    | Một đoạn chat (có thể là chat nhóm hoặc cá nhân) |
   | `Message` | Một tin nhắn gửi trong đoạn chat                 |

- Một đoạn chat có thể có nhiều người , một người có thể ở nhiều
đoạn chat (ManyToMany)

- Chat - Message: Một đoạn chat chứa nhiều tin nhắn -> OneToMany

@OneToMany
private List<Message> messages = new ArrayList<>();

- Một tin nhắn chỉ thuộc về một người gửi

- Một tin nhắn chỉ thuộc về một đoạn chat :  Một tin nhắn chỉ thuộc về một
đoạn chat → ManyToOne

@ManyToOne
private User user;

Một tin nhắn chỉ thuộc về một đoạn chat → ManyToOne
 Một đoạn chat có người tạo → ManyToOne


A (id = 1, tên: An)

B (id = 2, tên: Bình)

C (id = 3, tên: Cường)


Tình huống 1: Chat cá nhân giữa A và B
Một Chat được tạo với:

isGroup = false

users = [A, B]

createBy = A

Các Message:

Message 1: từ A gửi → "Chào Bình"

Message 2: từ B gửi → "Chào An"



 Tình huống 2: Chat nhóm giữa A, B, C
Một Chat mới được tạo:

isGroup = true

chat_Name = "Nhóm bạn thân"

users = [A, B, C]

createBy = C

Các Message:

Message 1: từ C gửi → "Tạo nhóm nè"

Message 2: từ A gửi → "Hello cả nhóm"

Message 3: từ B gửi → "Zô!"


| Message              | user (ManyToOne) | chat (ManyToOne) |
| -------------------- | ---------------- | ---------------- |
| msg1 = "Chào Bình"   | A                | Chat id=1        |
| msg2 = "Chào An"     | B                | Chat id=1        |
| msg3 = "Tạo nhóm nè" | C                | Chat id=2        |


| Từ...                      | Tới...     | Quan hệ                                                                 | Ý nghĩa |
| -------------------------- | ---------- | ----------------------------------------------------------------------- | ------- |
| Chat → Message             | OneToMany  | Một đoạn chat có nhiều tin nhắn                                         |         |
| Message → User             | ManyToOne  | Mỗi tin nhắn do 1 user gửi                                              |         |
| Chat → User (createBy)     | ManyToOne  | Chat do ai tạo                                                          |         |
| Chat ↔ User (participants) | ManyToMany | Một đoạn chat gồm nhiều người, và người có thể tham gia nhiều đoạn chat |         |
============================================================================================================

Một bản ghi bên A có thể liên kết với nhiều bản ghi bên B
Và ngược lại, một bản ghi bên B cũng liên kết với nhiều bản ghi bên A

User tham gia nhiều Group
Group có nhiều User


@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @ManyToMany
    @JoinTable(
        name = "user_group", // bảng trung gian
        joinColumns = @JoinColumn(name = "user_id"),  // FK đến user
        inverseJoinColumns = @JoinColumn(name = "group_id") // FK đến group
    )
    private Set<Group> groups = new HashSet<>();
}

@Entity
public class Group {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @ManyToMany(mappedBy = "groups")
    private Set<User> users = new HashSet<>();
}

| id | name |
| -- | ---- |
| 1  | An   |
| 2  | Bình |


| id | name        |
| -- | ----------- |
| 10 | Java Group  |
| 20 | Spring Team |


| user\_id | group\_id |
| -------- | --------- |
| 1        | 10        |
| 1        | 20        |
| 2        | 10        |

| Mối quan hệ                    | Giải thích               |
| ------------------------------ | ------------------------ |
| An thuộc Java Group (`1-10`)   | user\_id=1, group\_id=10 |
| An thuộc Spring Team (`1-20`)  | user\_id=1, group\_id=20 |
| Bình thuộc Java Group (`2-10`) | user\_id=2, group\_id=10 |


| Thuộc tính                              | Ý nghĩa                                                                    |
| --------------------------------------- | -------------------------------------------------------------------------- |
| `mappedBy = "groups"` (ở class `Group`) | Cho biết `Group` không sở hữu quan hệ, `User` là bên tạo bảng `user_group` |





Với JPA, bạn KHÔNG cần tạo bảng user_group thủ công — nó sẽ được tự tạo với 2 cột:


mappedBy là thuộc tính của annotation @OneToMany, @ManyToMany,
dùng để chỉ ra rằng quan hệ này bị điều khiển bởi bên còn lại (tức là "không sở hữu" quan hệ).

Nói cách khác: mappedBy dùng để tránh tạo 2 bảng quan hệ thừa, và nói rõ ai là chủ sở hữu
(owning side) của mối quan hệ trong CSDL.

- Chủ sở hữu mối quan hệ sẽ là bên chứa khóa ngoại.

"mappedBy = "user" nghĩa là user là tên của biến đại diện cho mối quan hệ ở phía bên kia
(bên owning side)."
====================================================================================================
1 User có nhiều Message
Mỗi Message chỉ thuộc về 1 User

@Entity
public class User {
    @Id
    private Long id;
    private String name;
    @OneToMany(mappedBy = "user")
    private List<Message> messages;
}

@Entity
public class Message {
    @Id
    private Long id;
    private String content;
    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;
}

Chỉ có 1 khóa ngoại user_id trong bảng message
Tránh tạo bảng phụ user_message


mappedBy = "tên thuộc tính bên kia"	Bên này không sở hữu, chỉ là bản phản chiếu

Nó trỏ đến	Tên thuộc tính ở phía sở hữu (owning side)
Mục đích	Tránh tạo bảng phụ không cần thiết
Nơi dùng	Trong @OneToMany, @ManyToMany để điều phối quan hệ
